let mapleader=" "
syntax on 
set number 
set wildmenu 
set hlsearch 

noremap <LEADER><CR> :nohlsearch<CR>
set incsearch 
set tabstop=4
set ignorecase 
map Q :q<CR>
map W :w<CR>
map s <nop>
map R :source $MYVIMRC<CR>
map sl :set splitright<CR>:vsplit<CR>
map sj :set nosplitbelow<CR>:split<CR>
map <LEADER>l <C-w>l
map <LEADER>k <C-W>k
map <LEADER>h <C-w>h
map <LEADER>j <C-w>j
map <LEADER>+ :vertical resize+5<CR>
map <LEADER>- :vertical resize-5<CR>
map <LEADER>n :NERDTreeToggle<CR>

map <LEADER>t :Tabularize /
set mouse=a


set relativenumber
set cursorline
set wrap
set showcmd

" 提示相同地方
set autochdir
" ===
" === Restore Cursor Position
" ===
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


noremap U 5k
noremap E 5j
set smartcase
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ayu-theme/ayu-vim'
Plug 'connorholyday/vim-snazzy'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs' 

Plug 'airblade/vim-gitgutter'
Plug 'kien/ctrlp.vim'

Plug 'gko/vim-coloresque', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }

" Markdown
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
Plug 'vimwiki/vimwiki'

Plug 'terryma/vim-multiple-cursors'
Plug 'tmhedberg/SimpylFold'
Plug 'itchyny/vim-cursorword'
Plug 'nathanaelkane/vim-indent-guides'

" Auto Complete
" Plug 'neoclide/coc.nvim', {'branch': 'release'}


Plug 'ajmwagar/vim-deus'
Plug 'jaxbot/semantic-highlight.vim'
Plug 'godlygeek/tabular'
" 查找相同单词，表顺序
" Plug 'osyo-manga/vim-anzu'


Plug 'dense-analysis/ale'
Plug 'mattn/emmet-vim' 
" 目前还没掌握emmet
let g:ctrlp_map = '<c-p>'
" Plug 'terryma/vim-multiple-cursors' 多光标操作
call plug#end()


" ===
" === Dress up my vim
" ===
let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
color snazzy
let g:SnazzyTransparent = 0 
set termguicolors
set background=dark
let g:airline_theme='dracula'
let g:lightline = {
\ 'colorscheme': 'snazzy',
\ }


" ===
" === NERDTree
" ===
" let NERDTreeMapCloseDir = "n"
" let NERDTreeMapChangeRoot = "y"

" PHP代码折叠
map <F5> <Esc>:EnableFastPHPFolds<Cr>
map <F6> <Esc>:EnablePHPFolds<Cr>
map <F7> <Esc>:DisablePHPFolds<Cr>
let g:DisableAutoPHPFolding = 1

" 显示不同变量的不同颜色
nnoremap <Leader>s :SemanticHighlightToggle<cr>

" ===
" === Dress up my vim
" ===
map <LEADER>c1 :set background=dark<CR>:colorscheme snazzy<CR>:AirlineTheme dracula<CR>
map <LEADER>c2 :set background=light<CR>:colorscheme ayu<CR>:AirlineTheme ayu_light<CR>


" ===
" === ale
" ===
let b:ale_linters = [] "['pylint']
" let b:ale_fixers = ['autopep8', 'yapf']
let g:ale_python_pylint_options = "--extension-pkg-whitelist=pygame"

" ===
" === vim-indent-guide
" ===
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_color_change_percent = 1
silent! unmap <LEADER>ig
autocmd WinEnter * silent! unmap <LEADER>ig

" 防止bug  vim-deus
" set t_Co=256
" set termguicolors

" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" set background=dark    " Setting dark mode
" colorscheme deus
" let g:deus_termcolors=256

set fdm=indent

" ===
" === coc
" ===
" fix the most annoying bug that coc has
" silent! au BufEnter,BufRead,BufNewFile * silent! unmap if
" let g:coc_global_extensions = ['coc-python', 'coc-vimlsp', 'coc-emmet', 'coc-html', 'coc-json', 'coc-css', 'coc-tsserver', 'coc-yank', 'coc-lists', 'coc-gitignore', 'coc-go', 'coc-omnisharp']
" " set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" " use <tab> for trigger completion and navigate to the next complete item
" function! s:check_back_space() abort
" 	let col = col('.') - 1
" 	return !col || getline('.')[col - 1]	=~ '\s'
" endfunction
" inoremap <silent><expr> <Tab>
" 			\ pumvisible() ? "\<C-n>" :
" 			\ <SID>check_back_space() ? "\<Tab>" :
" 			\ coc#refresh()
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <silent><expr> <c-space> coc#refresh()
" " Useful commands
" nnoremap <silent> <space>y :<C-u>CocList -A --normal yank<cr>
" nnoremap <silent> gd <Plug>(coc-definition)
" nnoremap <silent> gy <Plug>(coc-type-definition)
" nnoremap <silent> gi <Plug>(coc-implementation)
" nnoremap <silent> gr <Plug>(coc-references)
" nnoremap <leader>rn <Plug>(coc-rename)







