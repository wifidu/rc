" ===
" === System
" ===
set nocompatible
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
set mouse=a
set encoding=utf-8

set clipboard=unnamed

" Prevent incorrect backgroung rendering
let &t_ut=''

syntax enable

let mapleader=" "

syntax on 
set number 

" Show command autocomplete
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full


set hlsearch 

" ===
" === Editor behavior
" ===
" Better tab
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set list
set listchars=tab:▸\ ,trail:▫
set scrolloff=5


" let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" let &t_SR = "\<Esc>]50;CursorShape=2\x7"
" let &t_EI = "\<Esc>]50;CursorShape=0\x7"



noremap <LEADER><CR> :nohlsearch<CR>
set incsearch 
" set tabstop=4
set ignorecase 
map Q :q<CR>
map W :w<CR>
map s <nop>
map R :source $MYVIMRC<CR>
map sl :set splitright<CR>:vsplit<CR>
map sj :set nosplitbelow<CR>:split<CR>
map <LEADER>l <C-w>l
map <LEADER>k <C-W>k
map <LEADER>h <C-w>h
map <LEADER>j <C-w>j
map <LEADER>+ :vertical resize+5<CR>
map <LEADER>- :vertical resize-5<CR>
map <LEADER>n :NERDTreeToggle<CR>

map <LEADER>t :Tabularize /
set mouse=a


set relativenumber
set cursorline
set wrap
set showcmd

" 提示相同地方
set autochdir
" ===
" === Restore Cursor Position
" ===
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


noremap U 5k
noremap E 5j
set smartcase
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'connorholyday/vim-snazzy'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs' 
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'itchyny/vim-cursorword'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'AndrewRadev/switch.vim'
Plug 'jaxbot/semantic-highlight.vim'
Plug 'godlygeek/tabular'
call plug#end()


" ===
" === Tab management
" ===
" Create a new tab with tu
map tu :tabe<CR>
" Move around tabs with tn and ti
map th :-tabnext<CR>
map tl :+tabnext<CR>
" Move the tabs with tmn and tmi
map tmh :-tabmove<CR>
map tml :+tabmove<CR>

" Call figlet
map tx :r !figlet 

" w !sudo tee %
" w ~./***   写到某路径  r 读

" ===
" === Dress up my vim
" ===
let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
color snazzy
let g:SnazzyTransparent = 0 
set termguicolors
set background=dark
let g:airline_theme='dracula'
let g:lightline = {
\ 'colorscheme': 'snazzy',
\ }


" ===
" === NERDTree
" ===
" let NERDTreeMapCloseDir = "n"
" let NERDTreeMapChangeRoot = "y"


" 显示不同变量的不同颜色
nnoremap <Leader>s :SemanticHighlightToggle<cr>

" ===
" === Dress up my vim
" ===
map <LEADER>c1 :set background=dark<CR>:colorscheme snazzy<CR>:AirlineTheme dracula<CR>


" ===
" === ale
" ===
let b:ale_linters = [] "['pylint']
" let b:ale_fixers = ['autopep8', 'yapf']
let g:ale_python_pylint_options = "--extension-pkg-whitelist=pygame"

" ===
" === vim-indent-guide
" ===
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_color_change_percent = 1
silent! unmap <LEADER>ig
autocmd WinEnter * silent! unmap <LEADER>ig


" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

 "--fold setting vim折叠设置--
 "
 " 用缩进来定义折叠
set fdm=indent
 " 启动vim时不要自动折叠代码
set foldlevel=99

